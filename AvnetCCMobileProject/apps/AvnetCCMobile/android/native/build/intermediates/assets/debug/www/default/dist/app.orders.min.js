
/* JavaScript content from dist/app.orders.min.js in folder common */
(function () {

    angular.module('ccMobile.orders', []) ;

})();
(function () {
    'use strict';

    orderDetailController.$inject = ['$scope', '$state', '$stateParams', '$rootScope', 'ordersFactory', 'moment'];
    angular.module('ccMobile.orders')
        .controller('orderDetailController', orderDetailController);
    /**
     * Order detail controller main function.
     */
    function orderDetailController($scope, $state, $stateParams, $rootScope, ordersFactory, moment) {
        console.log('orderDetailController: load');

        // BINDABLE VARS
        $scope.handleBackButton = handleBackButton;

        //INTERNAL FUNCS
        function activate() {
            console.log('orderDetailController: activate');

        }

        function handleBackButton(){
            $state.go('orders');
        }

        activate();

    }
})();
(function () {
    'use strict';

    ordersController.$inject = ['$scope', '$state', '$rootScope', 'ordersFactory', 'moment', 'userService'];
    angular.module('ccMobile.orders')
        .controller('ordersController', ordersController);

    /**
     * Orders controller main function.
     */
    function ordersController($scope, $state, $rootScope, ordersFactory, moment, userService) {
        console.log('ordersController: load');

        // BINDABLE VARS

        $scope.orders = [];
        $scope.moment = moment;
        $scope.getOrdersCalled = false;


        //BINDABLE FUNCS
        $scope.loadMore = loadMore;
        $scope.goToOrderDetail = goToOrderDetail;


        //INTERNAL VARS
        var searchObject = {};
        searchObject.customerId = userService.userData.customerId;

        var allOrders = [];
        var isAtEnd = false;

        var counter = 0;
        var pageSize = 10;

        //INTERNAL FUNCS
        function activate() {
            console.log('ordersController: activate');
            $rootScope.busyInd.show();
            getOrders();
        }

        function goToOrderDetail(salesOrderNumber){
            console.log('ordersController: goToOrderDetail: ', salesOrderNumber);
            $state.go('orderDetail', {salesOrderNumber: salesOrderNumber});
        }

        function loadMore() {
            console.log('ordersController: loadMore');
            if (!isAtEnd) {
                for (var i = counter; i < pageSize + counter; i++) {
                    if (i < allOrders.length) {
                        $scope.orders.push(allOrders[i]);
                    } else {
                        isAtEnd = true;
                        break;
                    }
                }
                if (!isAtEnd) {
                    counter = counter + pageSize;
                }
            }
        }

        function getOrders() {

            console.log('ordersController: getOrders: ', searchObject);

            ordersFactory.fetchOrders(searchObject).then(function (orders) {
                allOrders = orders;
                $scope.loadMore();
                $scope.getOrdersCalled = true;

            }, function () {

                //handle error in ui

            }).finally(function () {
                $rootScope.busyInd.hide();
            });

        }

        activate();

    }
})();

/**
*  Orders Service
*
*  Provides methods for getting Orders Data
*/
(function(){
	'use strict';
	
	ordersFactory.$inject = ['$q', 'moment'];
	angular.module('ccMobile.orders')
	.factory('ordersFactory', ordersFactory);
	
	function ordersFactory($q, moment){
		
		var service = {};

		//bindables
		service.orders = [];

		service.fetchOrders = fetchOrders;

		//internals
		function fetchOrders(searchObject) {
			var deferred = $q.defer();

			console.log('ordersService: fetchOrders');

			var options = {
				customerId: searchObject.customerId
//				customerPo: searchObject.customerPo,
//				searchType: searchObject.searchType
			};

//			var options = {
//					customerId: userService.userData.customerId
//			}
			
			var invocationData = {
				adapter: 'OrdersAdapter',
				procedure: 'getOrders',
				parameters: [options]
			};

			console.log('ordersService: fetchOrders', invocationData);

			WL.Client.invokeProcedure(invocationData, {
				onSuccess: loadFeedsSuccess,
				onFailure: loadFeedsFailure
			});


			function loadFeedsSuccess(result) {
				console.log('ordersService: fetchOrders: success', result, result.responseJSON.Envelope.Body.ZqtcSalesorderSearchResponse.Saleorders.item);
	            var salesOrders = [];
	            var response = result.responseJSON.Envelope.Body.ZqtcSalesorderSearchResponse.Saleorders.item;
	            if (typeof response != 'undefined') {
	            	salesOrders = response;	
	            }
	            // convert bookdate to moment
	            for (var i = 0; i < salesOrders.length; i++) {
	            	salesOrders[i].BookDate = moment(salesOrders[i].BookDate, 'YYYY-MM-DD');
	            }
	            // sort descending
	            salesOrders.sort(function(a, b) {
	            	return b.BookDate - a.BookDate;
	            });

	            // add status description
	        	for (var a = 0; a < salesOrders.length; a++) {
	        	    if (salesOrders[a].StatusCode == 'A') {
	        	    	salesOrders[a].StatusDescription = 'Open';
	        	    }
	        	    else if (salesOrders[a].StatusCode == 'B') {
	        	    	salesOrders[a].StatusDescription = 'Partial';
	        	    }
	        	    else if (salesOrders[a].StatusCode == 'C') {
	        	    	salesOrders[a].StatusDescription = 'Complete';
	        	    }
	        	}	            
				deferred.resolve(salesOrders);
			}

			function loadFeedsFailure(result) {
				console.log('ordersService: fetchOrders: error', result);
				deferred.reject(result);
			}


			return deferred.promise;
		}
		
		return service;
	}
})();
